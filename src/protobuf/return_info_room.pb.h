// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: return_info_room.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_return_5finfo_5froom_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_return_5finfo_5froom_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_return_5finfo_5froom_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_return_5finfo_5froom_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_return_5finfo_5froom_2eproto;
namespace return_info {
class ReturnInfoMultipleRooms;
struct ReturnInfoMultipleRoomsDefaultTypeInternal;
extern ReturnInfoMultipleRoomsDefaultTypeInternal _ReturnInfoMultipleRooms_default_instance_;
}  // namespace return_info
PROTOBUF_NAMESPACE_OPEN
template<> ::return_info::ReturnInfoMultipleRooms* Arena::CreateMaybeMessage<::return_info::ReturnInfoMultipleRooms>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace return_info {

// ===================================================================

class ReturnInfoMultipleRooms final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:return_info.ReturnInfoMultipleRooms) */ {
 public:
  inline ReturnInfoMultipleRooms() : ReturnInfoMultipleRooms(nullptr) {}
  ~ReturnInfoMultipleRooms() override;
  explicit PROTOBUF_CONSTEXPR ReturnInfoMultipleRooms(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReturnInfoMultipleRooms(const ReturnInfoMultipleRooms& from);
  ReturnInfoMultipleRooms(ReturnInfoMultipleRooms&& from) noexcept
    : ReturnInfoMultipleRooms() {
    *this = ::std::move(from);
  }

  inline ReturnInfoMultipleRooms& operator=(const ReturnInfoMultipleRooms& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReturnInfoMultipleRooms& operator=(ReturnInfoMultipleRooms&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReturnInfoMultipleRooms& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReturnInfoMultipleRooms* internal_default_instance() {
    return reinterpret_cast<const ReturnInfoMultipleRooms*>(
               &_ReturnInfoMultipleRooms_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ReturnInfoMultipleRooms& a, ReturnInfoMultipleRooms& b) {
    a.Swap(&b);
  }
  inline void Swap(ReturnInfoMultipleRooms* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReturnInfoMultipleRooms* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReturnInfoMultipleRooms* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReturnInfoMultipleRooms>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReturnInfoMultipleRooms& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReturnInfoMultipleRooms& from) {
    ReturnInfoMultipleRooms::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReturnInfoMultipleRooms* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "return_info.ReturnInfoMultipleRooms";
  }
  protected:
  explicit ReturnInfoMultipleRooms(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomNumbersFieldNumber = 3,
    kIpFieldNumber = 1,
    kPortFieldNumber = 2,
  };
  // repeated string roomNumbers = 3;
  int roomnumbers_size() const;
  private:
  int _internal_roomnumbers_size() const;
  public:
  void clear_roomnumbers();
  const std::string& roomnumbers(int index) const;
  std::string* mutable_roomnumbers(int index);
  void set_roomnumbers(int index, const std::string& value);
  void set_roomnumbers(int index, std::string&& value);
  void set_roomnumbers(int index, const char* value);
  void set_roomnumbers(int index, const char* value, size_t size);
  std::string* add_roomnumbers();
  void add_roomnumbers(const std::string& value);
  void add_roomnumbers(std::string&& value);
  void add_roomnumbers(const char* value);
  void add_roomnumbers(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& roomnumbers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_roomnumbers();
  private:
  const std::string& _internal_roomnumbers(int index) const;
  std::string* _internal_add_roomnumbers();
  public:

  // string ip = 1;
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // uint32 port = 2;
  void clear_port();
  uint32_t port() const;
  void set_port(uint32_t value);
  private:
  uint32_t _internal_port() const;
  void _internal_set_port(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:return_info.ReturnInfoMultipleRooms)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> roomnumbers_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
    uint32_t port_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_return_5finfo_5froom_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ReturnInfoMultipleRooms

// string ip = 1;
inline void ReturnInfoMultipleRooms::clear_ip() {
  _impl_.ip_.ClearToEmpty();
}
inline const std::string& ReturnInfoMultipleRooms::ip() const {
  // @@protoc_insertion_point(field_get:return_info.ReturnInfoMultipleRooms.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReturnInfoMultipleRooms::set_ip(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:return_info.ReturnInfoMultipleRooms.ip)
}
inline std::string* ReturnInfoMultipleRooms::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:return_info.ReturnInfoMultipleRooms.ip)
  return _s;
}
inline const std::string& ReturnInfoMultipleRooms::_internal_ip() const {
  return _impl_.ip_.Get();
}
inline void ReturnInfoMultipleRooms::_internal_set_ip(const std::string& value) {
  
  _impl_.ip_.Set(value, GetArenaForAllocation());
}
inline std::string* ReturnInfoMultipleRooms::_internal_mutable_ip() {
  
  return _impl_.ip_.Mutable(GetArenaForAllocation());
}
inline std::string* ReturnInfoMultipleRooms::release_ip() {
  // @@protoc_insertion_point(field_release:return_info.ReturnInfoMultipleRooms.ip)
  return _impl_.ip_.Release();
}
inline void ReturnInfoMultipleRooms::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  _impl_.ip_.SetAllocated(ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ip_.IsDefault()) {
    _impl_.ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:return_info.ReturnInfoMultipleRooms.ip)
}

// uint32 port = 2;
inline void ReturnInfoMultipleRooms::clear_port() {
  _impl_.port_ = 0u;
}
inline uint32_t ReturnInfoMultipleRooms::_internal_port() const {
  return _impl_.port_;
}
inline uint32_t ReturnInfoMultipleRooms::port() const {
  // @@protoc_insertion_point(field_get:return_info.ReturnInfoMultipleRooms.port)
  return _internal_port();
}
inline void ReturnInfoMultipleRooms::_internal_set_port(uint32_t value) {
  
  _impl_.port_ = value;
}
inline void ReturnInfoMultipleRooms::set_port(uint32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:return_info.ReturnInfoMultipleRooms.port)
}

// repeated string roomNumbers = 3;
inline int ReturnInfoMultipleRooms::_internal_roomnumbers_size() const {
  return _impl_.roomnumbers_.size();
}
inline int ReturnInfoMultipleRooms::roomnumbers_size() const {
  return _internal_roomnumbers_size();
}
inline void ReturnInfoMultipleRooms::clear_roomnumbers() {
  _impl_.roomnumbers_.Clear();
}
inline std::string* ReturnInfoMultipleRooms::add_roomnumbers() {
  std::string* _s = _internal_add_roomnumbers();
  // @@protoc_insertion_point(field_add_mutable:return_info.ReturnInfoMultipleRooms.roomNumbers)
  return _s;
}
inline const std::string& ReturnInfoMultipleRooms::_internal_roomnumbers(int index) const {
  return _impl_.roomnumbers_.Get(index);
}
inline const std::string& ReturnInfoMultipleRooms::roomnumbers(int index) const {
  // @@protoc_insertion_point(field_get:return_info.ReturnInfoMultipleRooms.roomNumbers)
  return _internal_roomnumbers(index);
}
inline std::string* ReturnInfoMultipleRooms::mutable_roomnumbers(int index) {
  // @@protoc_insertion_point(field_mutable:return_info.ReturnInfoMultipleRooms.roomNumbers)
  return _impl_.roomnumbers_.Mutable(index);
}
inline void ReturnInfoMultipleRooms::set_roomnumbers(int index, const std::string& value) {
  _impl_.roomnumbers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:return_info.ReturnInfoMultipleRooms.roomNumbers)
}
inline void ReturnInfoMultipleRooms::set_roomnumbers(int index, std::string&& value) {
  _impl_.roomnumbers_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:return_info.ReturnInfoMultipleRooms.roomNumbers)
}
inline void ReturnInfoMultipleRooms::set_roomnumbers(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.roomnumbers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:return_info.ReturnInfoMultipleRooms.roomNumbers)
}
inline void ReturnInfoMultipleRooms::set_roomnumbers(int index, const char* value, size_t size) {
  _impl_.roomnumbers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:return_info.ReturnInfoMultipleRooms.roomNumbers)
}
inline std::string* ReturnInfoMultipleRooms::_internal_add_roomnumbers() {
  return _impl_.roomnumbers_.Add();
}
inline void ReturnInfoMultipleRooms::add_roomnumbers(const std::string& value) {
  _impl_.roomnumbers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:return_info.ReturnInfoMultipleRooms.roomNumbers)
}
inline void ReturnInfoMultipleRooms::add_roomnumbers(std::string&& value) {
  _impl_.roomnumbers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:return_info.ReturnInfoMultipleRooms.roomNumbers)
}
inline void ReturnInfoMultipleRooms::add_roomnumbers(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.roomnumbers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:return_info.ReturnInfoMultipleRooms.roomNumbers)
}
inline void ReturnInfoMultipleRooms::add_roomnumbers(const char* value, size_t size) {
  _impl_.roomnumbers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:return_info.ReturnInfoMultipleRooms.roomNumbers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ReturnInfoMultipleRooms::roomnumbers() const {
  // @@protoc_insertion_point(field_list:return_info.ReturnInfoMultipleRooms.roomNumbers)
  return _impl_.roomnumbers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ReturnInfoMultipleRooms::mutable_roomnumbers() {
  // @@protoc_insertion_point(field_mutable_list:return_info.ReturnInfoMultipleRooms.roomNumbers)
  return &_impl_.roomnumbers_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace return_info

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_return_5finfo_5froom_2eproto
