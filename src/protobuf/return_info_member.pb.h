// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: return_info_member.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_return_5finfo_5fmember_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_return_5finfo_5fmember_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_return_5finfo_5fmember_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_return_5finfo_5fmember_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_return_5finfo_5fmember_2eproto;
namespace return_info {
class ReturnInfoSingleRoom;
struct ReturnInfoSingleRoomDefaultTypeInternal;
extern ReturnInfoSingleRoomDefaultTypeInternal _ReturnInfoSingleRoom_default_instance_;
class RoomMember;
struct RoomMemberDefaultTypeInternal;
extern RoomMemberDefaultTypeInternal _RoomMember_default_instance_;
}  // namespace return_info
PROTOBUF_NAMESPACE_OPEN
template<> ::return_info::ReturnInfoSingleRoom* Arena::CreateMaybeMessage<::return_info::ReturnInfoSingleRoom>(Arena*);
template<> ::return_info::RoomMember* Arena::CreateMaybeMessage<::return_info::RoomMember>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace return_info {

// ===================================================================

class RoomMember final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:return_info.RoomMember) */ {
 public:
  inline RoomMember() : RoomMember(nullptr) {}
  ~RoomMember() override;
  explicit PROTOBUF_CONSTEXPR RoomMember(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoomMember(const RoomMember& from);
  RoomMember(RoomMember&& from) noexcept
    : RoomMember() {
    *this = ::std::move(from);
  }

  inline RoomMember& operator=(const RoomMember& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomMember& operator=(RoomMember&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoomMember& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoomMember* internal_default_instance() {
    return reinterpret_cast<const RoomMember*>(
               &_RoomMember_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RoomMember& a, RoomMember& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomMember* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomMember* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoomMember* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoomMember>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoomMember& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoomMember& from) {
    RoomMember::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomMember* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "return_info.RoomMember";
  }
  protected:
  explicit RoomMember(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 id = 2;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:return_info.RoomMember)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_return_5finfo_5fmember_2eproto;
};
// -------------------------------------------------------------------

class ReturnInfoSingleRoom final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:return_info.ReturnInfoSingleRoom) */ {
 public:
  inline ReturnInfoSingleRoom() : ReturnInfoSingleRoom(nullptr) {}
  ~ReturnInfoSingleRoom() override;
  explicit PROTOBUF_CONSTEXPR ReturnInfoSingleRoom(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReturnInfoSingleRoom(const ReturnInfoSingleRoom& from);
  ReturnInfoSingleRoom(ReturnInfoSingleRoom&& from) noexcept
    : ReturnInfoSingleRoom() {
    *this = ::std::move(from);
  }

  inline ReturnInfoSingleRoom& operator=(const ReturnInfoSingleRoom& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReturnInfoSingleRoom& operator=(ReturnInfoSingleRoom&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReturnInfoSingleRoom& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReturnInfoSingleRoom* internal_default_instance() {
    return reinterpret_cast<const ReturnInfoSingleRoom*>(
               &_ReturnInfoSingleRoom_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ReturnInfoSingleRoom& a, ReturnInfoSingleRoom& b) {
    a.Swap(&b);
  }
  inline void Swap(ReturnInfoSingleRoom* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReturnInfoSingleRoom* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReturnInfoSingleRoom* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReturnInfoSingleRoom>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReturnInfoSingleRoom& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReturnInfoSingleRoom& from) {
    ReturnInfoSingleRoom::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReturnInfoSingleRoom* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "return_info.ReturnInfoSingleRoom";
  }
  protected:
  explicit ReturnInfoSingleRoom(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMembersFieldNumber = 4,
    kIpFieldNumber = 1,
    kRoomNumberFieldNumber = 3,
    kPortFieldNumber = 2,
  };
  // repeated .return_info.RoomMember members = 4;
  int members_size() const;
  private:
  int _internal_members_size() const;
  public:
  void clear_members();
  ::return_info::RoomMember* mutable_members(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::return_info::RoomMember >*
      mutable_members();
  private:
  const ::return_info::RoomMember& _internal_members(int index) const;
  ::return_info::RoomMember* _internal_add_members();
  public:
  const ::return_info::RoomMember& members(int index) const;
  ::return_info::RoomMember* add_members();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::return_info::RoomMember >&
      members() const;

  // string ip = 1;
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // string roomNumber = 3;
  void clear_roomnumber();
  const std::string& roomnumber() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_roomnumber(ArgT0&& arg0, ArgT... args);
  std::string* mutable_roomnumber();
  PROTOBUF_NODISCARD std::string* release_roomnumber();
  void set_allocated_roomnumber(std::string* roomnumber);
  private:
  const std::string& _internal_roomnumber() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_roomnumber(const std::string& value);
  std::string* _internal_mutable_roomnumber();
  public:

  // uint32 port = 2;
  void clear_port();
  uint32_t port() const;
  void set_port(uint32_t value);
  private:
  uint32_t _internal_port() const;
  void _internal_set_port(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:return_info.ReturnInfoSingleRoom)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::return_info::RoomMember > members_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roomnumber_;
    uint32_t port_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_return_5finfo_5fmember_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RoomMember

// string name = 1;
inline void RoomMember::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& RoomMember::name() const {
  // @@protoc_insertion_point(field_get:return_info.RoomMember.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RoomMember::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:return_info.RoomMember.name)
}
inline std::string* RoomMember::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:return_info.RoomMember.name)
  return _s;
}
inline const std::string& RoomMember::_internal_name() const {
  return _impl_.name_.Get();
}
inline void RoomMember::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* RoomMember::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* RoomMember::release_name() {
  // @@protoc_insertion_point(field_release:return_info.RoomMember.name)
  return _impl_.name_.Release();
}
inline void RoomMember::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:return_info.RoomMember.name)
}

// int32 id = 2;
inline void RoomMember::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t RoomMember::_internal_id() const {
  return _impl_.id_;
}
inline int32_t RoomMember::id() const {
  // @@protoc_insertion_point(field_get:return_info.RoomMember.id)
  return _internal_id();
}
inline void RoomMember::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void RoomMember::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:return_info.RoomMember.id)
}

// -------------------------------------------------------------------

// ReturnInfoSingleRoom

// string ip = 1;
inline void ReturnInfoSingleRoom::clear_ip() {
  _impl_.ip_.ClearToEmpty();
}
inline const std::string& ReturnInfoSingleRoom::ip() const {
  // @@protoc_insertion_point(field_get:return_info.ReturnInfoSingleRoom.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReturnInfoSingleRoom::set_ip(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:return_info.ReturnInfoSingleRoom.ip)
}
inline std::string* ReturnInfoSingleRoom::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:return_info.ReturnInfoSingleRoom.ip)
  return _s;
}
inline const std::string& ReturnInfoSingleRoom::_internal_ip() const {
  return _impl_.ip_.Get();
}
inline void ReturnInfoSingleRoom::_internal_set_ip(const std::string& value) {
  
  _impl_.ip_.Set(value, GetArenaForAllocation());
}
inline std::string* ReturnInfoSingleRoom::_internal_mutable_ip() {
  
  return _impl_.ip_.Mutable(GetArenaForAllocation());
}
inline std::string* ReturnInfoSingleRoom::release_ip() {
  // @@protoc_insertion_point(field_release:return_info.ReturnInfoSingleRoom.ip)
  return _impl_.ip_.Release();
}
inline void ReturnInfoSingleRoom::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  _impl_.ip_.SetAllocated(ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ip_.IsDefault()) {
    _impl_.ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:return_info.ReturnInfoSingleRoom.ip)
}

// uint32 port = 2;
inline void ReturnInfoSingleRoom::clear_port() {
  _impl_.port_ = 0u;
}
inline uint32_t ReturnInfoSingleRoom::_internal_port() const {
  return _impl_.port_;
}
inline uint32_t ReturnInfoSingleRoom::port() const {
  // @@protoc_insertion_point(field_get:return_info.ReturnInfoSingleRoom.port)
  return _internal_port();
}
inline void ReturnInfoSingleRoom::_internal_set_port(uint32_t value) {
  
  _impl_.port_ = value;
}
inline void ReturnInfoSingleRoom::set_port(uint32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:return_info.ReturnInfoSingleRoom.port)
}

// string roomNumber = 3;
inline void ReturnInfoSingleRoom::clear_roomnumber() {
  _impl_.roomnumber_.ClearToEmpty();
}
inline const std::string& ReturnInfoSingleRoom::roomnumber() const {
  // @@protoc_insertion_point(field_get:return_info.ReturnInfoSingleRoom.roomNumber)
  return _internal_roomnumber();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReturnInfoSingleRoom::set_roomnumber(ArgT0&& arg0, ArgT... args) {
 
 _impl_.roomnumber_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:return_info.ReturnInfoSingleRoom.roomNumber)
}
inline std::string* ReturnInfoSingleRoom::mutable_roomnumber() {
  std::string* _s = _internal_mutable_roomnumber();
  // @@protoc_insertion_point(field_mutable:return_info.ReturnInfoSingleRoom.roomNumber)
  return _s;
}
inline const std::string& ReturnInfoSingleRoom::_internal_roomnumber() const {
  return _impl_.roomnumber_.Get();
}
inline void ReturnInfoSingleRoom::_internal_set_roomnumber(const std::string& value) {
  
  _impl_.roomnumber_.Set(value, GetArenaForAllocation());
}
inline std::string* ReturnInfoSingleRoom::_internal_mutable_roomnumber() {
  
  return _impl_.roomnumber_.Mutable(GetArenaForAllocation());
}
inline std::string* ReturnInfoSingleRoom::release_roomnumber() {
  // @@protoc_insertion_point(field_release:return_info.ReturnInfoSingleRoom.roomNumber)
  return _impl_.roomnumber_.Release();
}
inline void ReturnInfoSingleRoom::set_allocated_roomnumber(std::string* roomnumber) {
  if (roomnumber != nullptr) {
    
  } else {
    
  }
  _impl_.roomnumber_.SetAllocated(roomnumber, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.roomnumber_.IsDefault()) {
    _impl_.roomnumber_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:return_info.ReturnInfoSingleRoom.roomNumber)
}

// repeated .return_info.RoomMember members = 4;
inline int ReturnInfoSingleRoom::_internal_members_size() const {
  return _impl_.members_.size();
}
inline int ReturnInfoSingleRoom::members_size() const {
  return _internal_members_size();
}
inline void ReturnInfoSingleRoom::clear_members() {
  _impl_.members_.Clear();
}
inline ::return_info::RoomMember* ReturnInfoSingleRoom::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:return_info.ReturnInfoSingleRoom.members)
  return _impl_.members_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::return_info::RoomMember >*
ReturnInfoSingleRoom::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:return_info.ReturnInfoSingleRoom.members)
  return &_impl_.members_;
}
inline const ::return_info::RoomMember& ReturnInfoSingleRoom::_internal_members(int index) const {
  return _impl_.members_.Get(index);
}
inline const ::return_info::RoomMember& ReturnInfoSingleRoom::members(int index) const {
  // @@protoc_insertion_point(field_get:return_info.ReturnInfoSingleRoom.members)
  return _internal_members(index);
}
inline ::return_info::RoomMember* ReturnInfoSingleRoom::_internal_add_members() {
  return _impl_.members_.Add();
}
inline ::return_info::RoomMember* ReturnInfoSingleRoom::add_members() {
  ::return_info::RoomMember* _add = _internal_add_members();
  // @@protoc_insertion_point(field_add:return_info.ReturnInfoSingleRoom.members)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::return_info::RoomMember >&
ReturnInfoSingleRoom::members() const {
  // @@protoc_insertion_point(field_list:return_info.ReturnInfoSingleRoom.members)
  return _impl_.members_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace return_info

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_return_5finfo_5fmember_2eproto
